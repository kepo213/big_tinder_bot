import os

import emoji
from aiogram import types

from modules.functions.check_photo import search_face
from modules.functions.simple_funcs import update_age_period
from modules.functions.work_with_geo import adres_from_adres, cords_to_address
from modules.handlers.handlers_func import edit_text_call
from main import dp
from modules.handlers.users_handlers.my_profile import send_main_text
from modules.keyboards import admins_settings_kb, close_it, confirm, user_couples_adv_kb, admins_settings_adv_only, \
    admins_settings_adv_chat, remove_adv, admins_fake_people, admin_bots, user_sex_kb, get_geo, get_photo, zodiac_kb
from modules.sql_func import count_all, update_adv_db, read_by_name, update_db, read_all_2, new_adv, read_adv, \
    delete_line_in_table, read_all, read_all_order, insert_first, insert_user, update_city_db
from modules.dispatcher import bot, Admin, AdminSettings


# Main settings menu
@dp.callback_query_handler(state=AdminSettings.fake_people, text='back')
@dp.callback_query_handler(state=AdminSettings.chat_roll_adv, text='back')
@dp.callback_query_handler(state=AdminSettings.adv_start, text='back')
@dp.callback_query_handler(state=Admin.start, text='admin_adv_setings')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å', k_board=admins_settings_kb())
    await AdminSettings.start.set()


@dp.callback_query_handler(state=AdminSettings.adv_confirm, text='back')
@dp.callback_query_handler(state=AdminSettings.adv_photo, text='close_it')
@dp.callback_query_handler(state=AdminSettings.adv_url, text='close_it')
@dp.callback_query_handler(state=AdminSettings.adv_text, text='close_it')
@dp.callback_query_handler(state=AdminSettings.adv_number, text='close_it')
@dp.callback_query_handler(state=AdminSettings.start, text='admin_setings_adv_couples')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text=f'üì∫–†–µ–∫–ª–∞–º–∞ –≤ "–ù–∞–π–¥–∏ –ø–∞—Ä—É"',
                         k_board=admins_settings_adv_only())
    await AdminSettings.adv_start.set()


@dp.callback_query_handler(state=AdminSettings.adv_start, text='admin_setings_adv_number')
async def start_menu(call: types.CallbackQuery):
    adv_number = read_by_name(table='constants', name='adv_number', id_name='id', id_data=1)[0][0]
    await edit_text_call(call=call, text=f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º—ã.\n'
                                         f'–û–¥–∏–Ω –ø–æ—Å—Ç —Ä–µ–∫–ª–∞–º—ã –Ω–∞ {adv_number} –∞–Ω–∫–µ—Ç\n\n'
                                         f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ',
                         k_board=close_it())
    await AdminSettings.adv_number.set()


@dp.message_handler(state=AdminSettings.adv_number)
async def start_menu(message: types.Message):
    if message.text.isdigit():
        update_db(table="constants", name="adv_number", data=message.text, id_name='id', id_data=1)
        await message.answer('–ü–æ–º–µ–Ω—è–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(text='‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å', reply_markup=admins_settings_kb())
        await AdminSettings.start.set()
    else:
        await message.answer('ü§¶üèº‚Äç‚ôÇÔ∏è–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ!', reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(state=AdminSettings.start, text='admin_settings_fake_number')
async def start_menu(call: types.CallbackQuery):
    adv_number = read_by_name(table='constants', name='fake_post', id_name='id', id_data=1)[0][0]
    await edit_text_call(call=call, text=f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã —Ñ—ç–π–∫–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç\n'
                                         f'–û–¥–∏–Ω –ø–æ—Å—Ç —Ñ—ç–π–∫–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞ {adv_number} –∞–Ω–∫–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏—Ö\n\n'
                                         f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ',
                         k_board=close_it())
    await AdminSettings.fake_post_number.set()


@dp.message_handler(state=AdminSettings.fake_post_number)
async def start_menu(message: types.Message):
    if message.text.isdigit():
        update_db(table="constants", name="fake_post", data=message.text, id_name='id', id_data=1)
        await message.answer('–ü–æ–º–µ–Ω—è–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(text='‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å', reply_markup=admins_settings_kb())
        await AdminSettings.start.set()
    else:
        await message.answer('ü§¶üèº‚Äç‚ôÇÔ∏è–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ!', reply_markup=types.ReplyKeyboardRemove())


# Adv for MANS
@dp.callback_query_handler(state=AdminSettings.adv_start, text='admin_setings_adv_m')
async def start_menu(call: types.CallbackQuery):
    fast_data = read_by_name(table='adv', name='users_sex, text, photo_id, btn_url', id_name='id',
                             id_data=1)[0]

    if str(fast_data[2]) == '0':
        pass
    else:
        await call.message.answer_photo(caption=fast_data[1], photo=fast_data[3], parse_mode='html',
                                        reply_markup=user_couples_adv_kb(fast_data[2]))
    update_db(table="fast_info", name="fast_1", data='men', id_data=call.from_user.id)
    await edit_text_call(call=call, text=f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã\n'
                                         f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è <b>–ø–∞—Ä–Ω–µ–π!</b>',
                         k_board=close_it())
    await AdminSettings.adv_text.set()


# Adv for FEMALES
@dp.callback_query_handler(state=AdminSettings.adv_start, text='admin_setings_adv_f')
async def start_menu(call: types.CallbackQuery):
    fast_data = read_by_name(table='adv', name='users_sex, text, photo_id, btn_url', id_name='id',
                             id_data=2)[0]

    if str(fast_data[2]) == '0':
        pass
    else:
        await call.message.answer_photo(caption=fast_data[1], photo=fast_data[3], parse_mode='html',
                                        reply_markup=user_couples_adv_kb(fast_data[2]))
    update_db(table="fast_info", name="fast_1", data='female', id_data=call.from_user.id)
    await edit_text_call(call=call, text=f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã\n'
                                         f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è <b>–¥–µ–≤—É—à–µ–∫!</b>',
                         k_board=close_it())
    await AdminSettings.adv_text.set()


# Adv. Receive ad main text
@dp.message_handler(state=AdminSettings.adv_text)
async def start_menu(message: types.Message):
    update_db(table="fast_info", name="fast_2", data=message.text, id_data=message.from_user.id)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ url —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n'
                         '–ü—Ä–∏–º–µ—Ä: <b>https://www.youtube.com</b>', parse_mode='html',
                         reply_markup=close_it(), disable_web_page_preview=True)
    await AdminSettings.adv_url.set()


# Adv. Receive ad url
@dp.message_handler(state=AdminSettings.adv_url)
async def start_menu(message: types.Message):
    if ' ' in message.text or '\n' in message.text:
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n'
                             '–ü—Ä–∏–º–µ—Ä: <b>https://www.youtube.com</b>', parse_mode='html', reply_markup=close_it(),
                             disable_web_page_preview=True)
        return
    update_db(table="fast_info", name="fast_3", data=message.text, id_data=message.from_user.id)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞', parse_mode='html', reply_markup=close_it())
    await AdminSettings.adv_photo.set()


# Adv. Receive ad photo
@dp.message_handler(state=AdminSettings.adv_photo, content_types=types.ContentTypes.ANY)
async def start_menu(message: types.Message):
    if message.content_type == 'photo':
        update_db(table="fast_info", name="fast_4", data=message.photo[-1].file_id, id_data=message.from_user.id)

        fast_data = read_by_name(table='fast_info', name='fast_1, fast_2, fast_3, fast_4',
                                 id_data=message.from_user.id)[0]

        await message.answer_photo(caption=fast_data[1], photo=fast_data[3], parse_mode='html',
                                   reply_markup=user_couples_adv_kb(fast_data[2]))
        if str(fast_data[0]) == 'men':
            sex = '–ø–∞—Ä–Ω–µ–π'
        else:
            sex = '–¥–µ–≤—É—à–µ–∫'
        await message.answer(f'–†–µ–∫–ª–∞–º–∞ –¥–ª—è: <b>{sex}</b>\n'
                             f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é. –°—Ç–∞—Ä–∞—è —Ä–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞',
                             reply_markup=confirm(), parse_mode='html')
        await AdminSettings.adv_confirm.set()
    else:
        await message.answer('–Ø –∂–¥—É —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ', reply_markup=close_it())


# Adv confirm
@dp.callback_query_handler(state=AdminSettings.adv_confirm, text='yes_all_good')
async def start_menu(call: types.CallbackQuery):
    fast_data = read_by_name(table='fast_info', name='fast_1, fast_2, fast_3, fast_4',
                             id_data=call.from_user.id)[0]
    if str(fast_data[0]) == 'men':
        update_adv_db(text=fast_data[1], photo_id=fast_data[3], btn_url=fast_data[2], id_data=1)
    else:
        update_adv_db(text=fast_data[1], photo_id=fast_data[3], btn_url=fast_data[2], id_data=2)

    await edit_text_call(call=call, text=f'üï∂–†–µ–∫–ª–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞')
    await call.message.answer(text='‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å', reply_markup=admins_settings_kb())
    await AdminSettings.start.set()


# _________
# AD settings in chat_roll
@dp.callback_query_handler(state=AdminSettings.chat_roll_add_adv, text='close_it')
@dp.callback_query_handler(state=AdminSettings.start, text='admin_setings_adv_chat_roll')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üì∫–†–µ–∫–ª–∞–º–∞ –≤ "–ß–∞—Ç —Ä—É–ª–µ—Ç–∫–µ"',
                         k_board=admins_settings_adv_chat())
    await AdminSettings.chat_roll_adv.set()


@dp.callback_query_handler(state=AdminSettings.chat_roll_adv, text='admin_setings_chat_adv_off')
@dp.callback_query_handler(state=AdminSettings.chat_roll_adv, text='admin_setings_chat_adv_on')
async def start_menu(call: types.CallbackQuery):
    if call.data == 'admin_setings_chat_adv_off':
        update_db(table='constants', name='chat_roll_adv', data=0, id_name='id', id_data=1)
        await call.answer('–û—Ç–∫–ª—é—á–∏–ª ‚ùå')
    else:
        update_db(table='constants', name='chat_roll_adv', data=1, id_name='id', id_data=1)
        await call.answer('–í–∫–ª—é—á–∏–ª ‚úÖ')
    await edit_text_call(call=call, text='üì∫–†–µ–∫–ª–∞–º–∞ –≤ "–ß–∞—Ç —Ä—É–ª–µ—Ç–∫–µ"',
                         k_board=admins_settings_adv_chat())
    await AdminSettings.chat_roll_adv.set()


# Adv for MANS
@dp.callback_query_handler(state=AdminSettings.chat_roll_adv, text='admin_setings_adv_m')
async def start_menu(call: types.CallbackQuery):
    adv = read_adv(table='chat_adv', name='id, text', id_name='users_sex', id_data='men')
    if str(adv) == '[]':
        await call.message.edit_text('–†–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç!')
    else:
        await call.message.edit_text('–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –†–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
                                     reply_markup=remove_adv(adv))

    update_db(table="fast_info", name="fast_1", data='men', id_data=call.from_user.id)
    await call.message.answer(text=f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —á–∞—Ç —Ä—É–ª–µ—Ç–∫–∏\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è '
                                   f'<b>–ø–∞—Ä–Ω–µ–π!</b>', reply_markup=close_it(), parse_mode='html')
    await AdminSettings.chat_roll_add_adv.set()


# Adv for FEMALES
@dp.callback_query_handler(state=AdminSettings.chat_roll_adv, text='admin_setings_adv_f')
async def start_menu(call: types.CallbackQuery):
    adv = read_adv(table='chat_adv', name='id, text', id_name='users_sex',
                   id_data='female')
    if str(adv) == '[]':
        await call.message.edit_text('–†–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç!')
    else:
        await call.message.edit_text('–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –†–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
                                     reply_markup=remove_adv(adv))

    update_db(table="fast_info", name="fast_1", data='female', id_data=call.from_user.id)
    await call.message.answer(text=f'‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã\n'
                                   f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è <b>–¥–µ–≤—É—à–µ–∫!</b>',
                              reply_markup=close_it(), parse_mode='html')
    await AdminSettings.chat_roll_add_adv.set()


# Adv for FEMALES
@dp.callback_query_handler(state=AdminSettings.chat_roll_add_adv, text_contains='delete_ad_')
async def start_menu(call: types.CallbackQuery):
    adv_id = call.data.split('delete_ad_')[1]
    delete_line_in_table(data=adv_id)
    await call.message.answer(text='üì∫–†–µ–∫–ª–∞–º–∞ –≤ "–ß–∞—Ç —Ä—É–ª–µ—Ç–∫–µ"',
                              reply_markup=admins_settings_adv_chat())
    await AdminSettings.chat_roll_adv.set()


# Adv. Receive ad photo
@dp.message_handler(state=AdminSettings.chat_roll_add_adv)
async def start_menu(message: types.Message):
    sex = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
    new_adv(sex=sex, text=message.text)
    await message.answer('–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    await message.answer(text='üì∫–†–µ–∫–ª–∞–º–∞ –≤ "–ß–∞—Ç —Ä—É–ª–µ—Ç–∫–µ"', reply_markup=admins_settings_adv_chat())
    await AdminSettings.chat_roll_adv.set()


# _________
# Work with bots
@dp.callback_query_handler(state=AdminSettings.create_bot, text='back')
@dp.callback_query_handler(state=AdminSettings.start, text='admin_settings_fake_people')
async def fake_people_start(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üå†–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –§—ç–π–∫–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç',
                         k_board=admins_fake_people())
    await AdminSettings.fake_people.set()


# Create new bot
@dp.callback_query_handler(state=AdminSettings.fake_people, text='new_bot')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='ü§ñüôç –ù–æ–≤—ã–π –±–æ—Ç\n'
                                         '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞?',
                         k_board=confirm())
    await AdminSettings.create_bot.set()


# Create new bot
@dp.callback_query_handler(state=AdminSettings.create_bot, text='yes_all_good')
async def start_menu(call: types.CallbackQuery):
    bots = read_all_order(table='bots')
    if str(bots) == '[]':
        new_id = 1001
    else:
        new_id = int(bots[0][1]) + 2
    insert_first(table='bots', name='tg_id', data=new_id)
    insert_user(name='Anna', tg_id=f"{new_id}", user_nickname='0')
    update_db(table="all_users", name="status", data="bot", id_data=new_id)
    update_db(table="fast_info", name="search_range", data=0, id_data=new_id)
    await edit_text_call(call=call, text=f'ü§ñüôç –ù–æ–≤—ã–π –±–æ—Ç\n'
                                         f'–û—Ç–ª–∏—á–Ω–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ c id <b>{new_id}</b>\n'
                                         f'–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤\nü§ñüôçüèª‚Äç‚ôÄÔ∏è –ë–æ—Ç—ã –ü—Ä–æ—Å–º–æ—Ç—Ä üôé‚Äç‚ôÇÔ∏è')
    await call.message.answer(text='üå†–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –§—ç–π–∫–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç', reply_markup=admins_fake_people())
    await AdminSettings.fake_people.set()


# Create new bot
@dp.callback_query_handler(state=AdminSettings.fake_people, text='admin_bot_work')
async def start_menu(call: types.CallbackQuery):
    bots = read_all_order(table='bots')
    await edit_text_call(call=call, text='ü§ñüôçüèª‚Äç‚ôÄÔ∏è –ë–æ—Ç—ã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üôé‚Äç‚ôÇÔ∏è')
    if str(bots) == '[]':
        await call.message.answer('ü§ñ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –±–æ—Ç–æ–≤.')
    else:
        await call.message.answer('ü§ñ –í–æ—Ç –≤–∞—à–∏ –±–æ—Ç—ã!', reply_markup=admin_bots(bots))
    await AdminSettings.work_with_bot.set()


# Create new bot
@dp.callback_query_handler(state=AdminSettings.work_with_bot, text_contains='admin_bot_')
async def start_menu(call: types.CallbackQuery):
    bot_id = int(call.data.split('_')[2])
    update_db(table='fast_info', name='fast_1', data=bot_id, id_data=call.from_user.id)
    await edit_text_call(call=call, text='ü§ñüôçüèª‚Äç‚ôÄÔ∏è –ë–æ—Ç—ã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üôé‚Äç‚ôÇÔ∏è')
    await send_main_text(user_id=bot_id, chat_id=call.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile Name menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_name')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üë§ –ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à–µ –∏–º—è:</b>', k_board=close_it())
    await AdminSettings.name.set()


# Profile NAME menu
@dp.message_handler(state=AdminSettings.name)
async def start_menu(message: types.Message):
    status = True
    check_name = str(message.text.lower())
    with open('bad_words.txt', 'r') as words:
        words = str(words.read())
        words = words.split('\n')
        for word in words:
            if word in check_name:
                status = False
                break
            else:
                pass
    if not status:
        await message.answer('–í –≤–∞—à–µ–º –∏–º–µ–Ω–∏ –∏–º–µ—é—Ç—Å—è –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–µ —Å–ª–æ–≤–∞!')
        return
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
    update_db(name='user_name', data=message.text, id_data=bot_id)
    await message.answer('–í–∞—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile AGE menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_age')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üîû –ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b>', k_board=close_it())
    await AdminSettings.age.set()


# Profile AGE menu
@dp.message_handler(state=AdminSettings.age)
async def start_menu(message: types.Message):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
    if message.text.isdigit():
        user_age = int(message.text)
        if user_age < 16:
            await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 16 –ª–µ—Ç')
        elif user_age > 119:
            await message.answer('–í –Ø–ø–æ–Ω–∏–∏ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –º–∏—Ä–∞ –ö–∞–Ω–µ –¢–∞–Ω–∞–∫–∞ –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–ª–∞ 119-–ª–µ—Ç–∏–µ.\n'
                                 '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –±—ã—Ç—å —Ç–∞–∫–∏–º —Å—Ç–∞—Ä—ã–º!')
        else:
            update_age_period(age=user_age, tg_ig=bot_id)
            update_db(table='fast_info', name='user_age', data=user_age, id_data=bot_id)
            await message.answer('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!')
    else:
        await message.answer('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile SEX menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_sex')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üöª –í—ã–±–µ—Ä–∏—Ç–µ <b>–í–∞—à –ø–æ–ª:</b>', k_board=user_sex_kb())
    await AdminSettings.sex.set()


# Profile SEX menu
@dp.message_handler(state=AdminSettings.sex)
async def start_menu(message: types.Message):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
    if message.text.lower() == '–ø–∞—Ä–µ–Ω—å':
        update_db(table='fast_info', name='user_sex', data='men', id_data=bot_id)
        update_db(table='fast_info', name='search_sex', data='female', id_data=bot_id)
    elif message.text.lower() == '–¥–µ–≤—É—à–∫–∞':
        update_db(table='fast_info', name='user_sex', data='female', id_data=bot_id)
        update_db(table='fast_info', name='search_sex', data='men', id_data=bot_id)
    else:
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', reply_markup=user_sex_kb())
        return
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile CITY menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_city')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='–ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à –≥–æ—Ä–æ–¥:</b>\n'
                                         '–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
                         k_board=get_geo())
    await AdminSettings.city.set()


# Profile CITY menu
@dp.message_handler(state=AdminSettings.city)
async def start_menu(message: types.Message):
    try:
        city, latitude, longitude, full_adress = adres_from_adres(message.text)
        if city == 'Error' or city is None:
            await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
            return
        else:
            await message.answer(f'–Ø –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å:\n'
                                 f'<b>{full_adress}</b>\n'
                                 f'–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.', reply_markup=confirm(without_back=True),
                                 parse_mode='html')
            bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
            update_city_db(data=city, latitude=latitude, longitude=longitude, id_data=bot_id)
    except:
        return
    await AdminSettings.city.set()


# Profile CITY menu
@dp.message_handler(content_types=['location'], state=AdminSettings.city)
async def fill_form(message: types.Message):
    x = message.location.latitude
    y = message.location.longitude
    address = cords_to_address(x=x, y=y)
    if address == 'Error':
        await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
        return
    address, latitude, longitude, full_adress = adres_from_adres(address)
    if address == 'Error':
        await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
        return
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
    update_city_db(data=address, latitude=latitude, longitude=longitude, id_data=bot_id)
    await message.answer('–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω!')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile CITY menu
@dp.callback_query_handler(state=AdminSettings.city, text='yes_all_good')
async def fill_form(call: types.CallbackQuery):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=call.from_user.id)[0][0]
    await call.message.answer('–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω!')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=call.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile PHOTO menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_photo')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ <b>–í–∞—à–µ —Ñ–æ—Ç–æ</b> –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram.\n\n'
                                         '–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏, '
                                         '—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏ –ª—É—á—à–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ä—É—á–Ω—É—é.')
    await AdminSettings.photo.set()


# Profile PHOTO menu
@dp.message_handler(state=AdminSettings.photo, content_types=types.ContentTypes.PHOTO)
async def fill_form(message: types.Message):
    try:
        file_name = f"{str(message.from_user.id)}.jpg"
        await message.photo[-1].download(destination_file=f'modules/functions/{file_name}')
        faces_number = search_face(file_name=file_name)
        if faces_number > 0:
            bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
            update_db(table='fast_info', name='photo_id', data=message.photo[-1].file_id, id_data=bot_id)
            await message.answer('–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=types.ReplyKeyboardRemove())
            # Send main profile text
            await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
            await AdminSettings.change_bot.set()
        else:
            await message.answer('–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n'
                                 '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –ª–∏—Ü–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;\n'
                                 '- –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥–æ—Ç—ã;\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;')
        os.remove(f'modules/functions/{file_name}')
    except:
        pass


# Profile PHOTO menu
@dp.message_handler(state=AdminSettings.photo)
async def fill_form(message: types.Message):
    await message.answer('–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ.')


# Profile ABOUT menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_about')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:\n'
                                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>0</b>', k_board=close_it())
    await AdminSettings.about.set()


# Profile ABOUT menu
@dp.message_handler(state=AdminSettings.about)
async def start_menu(message: types.Message):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
    update_db(table='fast_info', name='about_text', data=message.text, id_data=bot_id)
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile EMOJI menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_emoji')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º –∏–º–µ–Ω–µ–º!\n'
                                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>0</b>', k_board=close_it())
    await AdminSettings.emoji.set()


# Profile EMOJI menu
@dp.message_handler(state=AdminSettings.emoji)
async def start_menu(message: types.Message):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]

    if emoji.demojize(message.text).startswith(':') and emoji.demojize(message.text).endswith(':'):
        update_db(table='fast_info', name='emoji', data=message.text, id_data=bot_id)
        await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
        # Send main profile text
        await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
        await AdminSettings.change_bot.set()
    elif message.text == '0':
        update_db(table='fast_info', name='emoji', data=message.text, id_data=bot_id)
        await message.answer('–£–¥–∞–ª–µ–Ω–æ!')
        # Send main profile text
        await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
        await AdminSettings.change_bot.set()
    else:
        await message.answer('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ emoji!')


# Profile ZODIAC menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_zodiac')
async def start_menu(call: types.CallbackQuery):
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫:', reply_markup=zodiac_kb())
    await AdminSettings.zodiac.set()


# Profile ZODIAC menu
@dp.callback_query_handler(state=AdminSettings.zodiac, text_contains='zodiac_')
async def start_menu(call: types.CallbackQuery):
    if call.data == 'zodiac_aries':
        zodiac = '‚ôàÔ∏è –û–≤–µ–Ω'
    elif call.data == 'zodiac_taurus':
        zodiac = '‚ôâÔ∏è –¢–µ–ª–µ—Ü'
    elif call.data == 'zodiac_gemini':
        zodiac = '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã'

    elif call.data == 'zodiac_cancer':
        zodiac = '‚ôãÔ∏è –†–∞–∫'
    elif call.data == 'zodiac_leo':
        zodiac = '‚ôåÔ∏è –õ–µ–≤'
    elif call.data == 'zodiac_virgo':
        zodiac = '‚ôçÔ∏è –î–µ–≤–∞'

    elif call.data == 'zodiac_libra':
        zodiac = '‚ôéÔ∏è –í–µ—Å—ã'
    elif call.data == 'zodiac_scorpio':
        zodiac = '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω'
    elif call.data == 'zodiac_sagittarius':
        zodiac = '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü'

    elif call.data == 'zodiac_capricorn':
        zodiac = '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥'
    elif call.data == 'zodiac_aquarius':
        zodiac = '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π'
    elif call.data == 'zodiac_pisces':
        zodiac = '‚ôìÔ∏è –†—ã–±—ã'

    elif call.data == 'clear':
        zodiac = '0'
    else:
        return
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=call.from_user.id)[0][0]
    update_db(table='fast_info', name='zodiac', data=zodiac, id_data=bot_id)
    await call.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=call.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile INSTAGRAM menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_insta')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Instagram\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>durov</b>\n'
                                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>0</b>', k_board=close_it())
    await AdminSettings.Instagram.set()


# Profile INSTAGRAM menu
@dp.message_handler(state=AdminSettings.Instagram)
async def start_menu(message: types.Message):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=message.from_user.id)[0][0]
    update_db(table='fast_info', name='instagram', data=message.text, id_data=bot_id)
    if message.text == '0':
        await message.answer('–í–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º —É–¥–∞–ª–µ–Ω!')
    else:
        await message.answer('–í–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –¥–æ–±–∞–≤–ª–µ–Ω!')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=message.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile Close/Open profile menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_close')
async def start_menu(call: types.CallbackQuery):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=call.from_user.id)[0][0]
    status = read_by_name(table='fast_info', name='search_status', id_data=bot_id)[0][0]
    if status == 0:
        update_db(table='fast_info', name='search_status', data=1, id_data=bot_id)
        await edit_text_call(call=call, text='üôã–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ –ø–æ–∏—Å–∫–µ!')
    else:
        update_db(table='fast_info', name='search_status', data=0, id_data=bot_id)
        await edit_text_call(call=call, text='üôÖ–í—ã —Å–∫—Ä—ã–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ –ø–æ–∏—Å–∫–µ!')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=call.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile Close/Open profile menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='profile_good')
async def start_menu(call: types.CallbackQuery):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=call.from_user.id)[0][0]
    status = read_by_name(table='fast_info', name='photo_good', id_data=bot_id)[0][0]
    if status == "0":
        update_db(table='fast_info', name='photo_good', data=1, id_data=bot_id)
        await edit_text_call(call=call, text='üôã ‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ñ–æ—Ç–æ')
    else:
        update_db(table='fast_info', name='photo_good', data=0, id_data=bot_id)
        await edit_text_call(call=call, text='üôÖ ‚ùå –û—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ')
    # Send main profile text
    await send_main_text(user_id=bot_id, chat_id=call.from_user.id, delete=True)
    await AdminSettings.change_bot.set()


# Profile INSTAGRAM menu
@dp.callback_query_handler(state=AdminSettings.change_bot, text='delete_bot')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='‚ùåü§ñ–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞?', k_board=confirm())
    await AdminSettings.delete.set()


# Profile INSTAGRAM menu
@dp.callback_query_handler(state=AdminSettings.delete, text='yes_all_good')
async def start_menu(call: types.CallbackQuery):
    bot_id = read_by_name(table='fast_info', name='fast_1', id_data=call.from_user.id)[0][0]
    delete_line_in_table(table='presents', name='tg_id', data=bot_id)
    delete_line_in_table(table='likes', name='tg_id', data=bot_id)

    delete_line_in_table(table='fast_info', name='tg_id', data=bot_id)
    delete_line_in_table(table='couples', name='tg_id', data=bot_id)
    delete_line_in_table(table='chat_roll', name='tg_id', data=bot_id)
    delete_line_in_table(table='all_users', name='tg_id', data=bot_id)
    delete_line_in_table(table='bots', name='tg_id', data=bot_id)
    await fake_people_start(call)


# Create new bot
@dp.callback_query_handler(state=AdminSettings.fake_people, text='admin_bot_off')
@dp.callback_query_handler(state=AdminSettings.fake_people, text='admin_bot_on')
async def start_menu(call: types.CallbackQuery):
    status = int(read_by_name(table='constants', name='fake_post', id_name='id', id_data=1)[0][0])
    if status == 0:
        update_db(table='constants', name='fake_post', data=1, id_name='id', id_data=1)
    else:
        update_db(table='constants', name='fake_post', data=0, id_name='id', id_data=1)
    await edit_text_call(call=call, text='üå†–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –§—ç–π–∫–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç',
                         k_board=admins_fake_people())
    await AdminSettings.fake_people.set()
