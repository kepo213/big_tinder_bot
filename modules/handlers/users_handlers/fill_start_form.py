import os

from aiogram import types
from main import dp
from modules.functions.check_photo import search_face
from modules.functions.work_with_geo import adres_from_adres, cords_to_address
from aiogram.dispatcher.filters import Text
from modules.handlers.handlers_func import edit_text_call
from modules.sql_func import insert_user, read_by_name, all_users_table, \
    update_db, create_fast_info_table, sender_table, read_all
from modules.handlers.admin_handlers.download_users import upload_all_data, upload_all_users_id
from modules.dispatcher import bot, Admin, User
from aiogram.dispatcher import FSMContext
from modules.keyboards import user_sex_kb, get_geo, get_photo, confirm, main_user_kb


@dp.callback_query_handler(state=User.start)
async def fill_form(call: types.CallbackQuery):
    call_text = call.data
    if call_text == 'ru_lang':
        pass
    elif call_text == 'en_lang':
        update_db(name='language', data='en', id_data=call.from_user.id)
    else:
        return
    await edit_text_call(call, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! üëã\n\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–í–∞—à–µ –∏–º—è!</b>")
    await User.set_name.set()


@dp.message_handler(state=User.set_name)
async def fill_form(message: types.Message):
    status = True
    check_name = str(message.text.lower())
    with open('bad_words.txt', 'r') as words:
        words = str(words.read())
        words = words.split('\n')
        for word in words:
            if word in check_name:
                status = False
                break
            else:
                pass
    if status:
        update_db(name='user_name', data=message.text, id_data=message.from_user.id)
        await message.answer('üîû –ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç</b>:', parse_mode='html')
        await User.set_age.set()
    else:
        await message.answer('–í –≤–∞—à–µ–º –∏–º–µ–Ω–∏ –µ—Å—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞!')


@dp.message_handler(state=User.set_age)
async def fill_form(message: types.Message):
    if message.text.isdigit():
        user_age = int(message.text)
        if user_age < 16:
            await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 16 –ª–µ—Ç')
        elif user_age > 119:
            await message.answer('–í –Ø–ø–æ–Ω–∏–∏ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –º–∏—Ä–∞ –ö–∞–Ω–µ –¢–∞–Ω–∞–∫–∞ –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–ª–∞ 119-–ª–µ—Ç–∏–µ.\n'
                                 '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –±—ã—Ç—å —Ç–∞–∫–∏–º —Å—Ç–∞—Ä—ã–º!')
        else:
            update_db(table='fast_info', name='user_age', data=user_age, id_data=message.from_user.id)
            await message.answer('üöª –í—ã–±–µ—Ä–∏—Ç–µ <b>–í–∞—à –ø–æ–ª:</b>', parse_mode='html', reply_markup=user_sex_kb())
            await User.set_sex.set()
    else:
        await message.answer('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º')


@dp.message_handler(state=User.set_sex)
async def fill_form(message: types.Message):
    if message.text.lower() == '–ø–∞—Ä–µ–Ω—å':
        update_db(table='fast_info', name='user_sex', data='men', id_data=message.from_user.id)
    elif message.text.lower() == '–¥–µ–≤—É—à–∫–∞':
        update_db(table='fast_info', name='user_sex', data='female', id_data=message.from_user.id)
    else:
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', reply_markup=user_sex_kb())
        return
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à –≥–æ—Ä–æ–¥:</b>\n'
                         '–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', reply_markup=get_geo(),
                         parse_mode='html')
    await User.set_geo.set()


# receive the address of user's home
@dp.message_handler(content_types=['location'], state=User.set_geo)
async def fill_form(message: types.Message):
    x = message.location.latitude
    y = message.location.longitude
    address = cords_to_address(x=x, y=y)
    if address == 'Error':
        await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
        return
    address = adres_from_adres(address)
    if address == 'Error':
        await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
        return
    update_db(table='fast_info', name='city', data=address, id_data=message.from_user.id)
    await message.answer('üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ <b>–í–∞—à–µ —Ñ–æ—Ç–æ</b> –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram.\n'
                         '–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏, —Ç–æ '
                         '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏ –ª—É—á—à–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ä—É—á–Ω—É—é.',
                         parse_mode='html', reply_markup=get_photo())
    await User.set_photo.set()


@dp.message_handler(state=User.set_geo)
async def fill_form(message: types.Message):
    try:
        city = adres_from_adres(message.text)
        if city == 'Error':
            await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
            return
        else:
            await message.answer(f'–Ø –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å:\n'
                                 f'<b>{city}</b>\n'
                                 f'–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.', reply_markup=confirm(True), parse_mode='html')
            update_db(table='fast_info', name='city', data=city, id_data=message.from_user.id)
            await User.set_geo.set()
    except:
        pass


@dp.callback_query_handler(state=User.set_geo, text='yes_all_good')
async def fill_form(call: types.CallbackQuery):
    await call.message.answer('üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ <b>–í–∞—à–µ —Ñ–æ—Ç–æ</b> –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram.\n'
                              '–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏, —Ç–æ '
                              '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏ –ª—É—á—à–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ä—É—á–Ω—É—é.',
                              parse_mode='html', reply_markup=get_photo())
    await User.set_photo.set()


@dp.message_handler(state=User.set_photo, content_types=types.ContentTypes.PHOTO)
async def fill_form(message: types.Message):
    try:
        file_name = f"{str(message.from_user.id)}.jpg"
        await message.photo[-1].download(destination_file=f'modules/functions/{file_name}')
        faces_number = search_face(file_name=file_name)
        if faces_number == 1:
            update_db(name='status', data='active', id_data=message.from_user.id)
            update_db(table='fast_info', name='photo_id', data=message.photo[-1].file_id, id_data=message.from_user.id)
            await message.answer('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                                 'üë©‚Äç‚ù§Ô∏è‚Äçüë® –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ, –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π: /love\n'
                                 'üìÇ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é: /start', reply_markup=main_user_kb())
            await User.start.set()
        else:
            await message.answer('–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n'
                                 '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –ª–∏—Ü–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;\n'
                                 '- –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥–æ—Ç—ã;\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;')
        os.remove(f'modules/functions/{file_name}')
    except:
        pass


@dp.message_handler(state=User.set_photo)
async def fill_form(message: types.Message):
    if message.text == '–í–∑—è—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è':
        file_name = f"{str(message.from_user.id)}.jpg"
        photo = await message.from_user.get_profile_photos()
        if str(photo.photos) == '[]':
            faces_number = 1000
        else:
            await photo.photos[0][-1].download(destination_file=f'modules/functions/{file_name}')
            faces_number = search_face(file_name=file_name)
        if faces_number == 1:
            update_db(name='status', data='active', id_data=message.from_user.id)
            update_db(table='fast_info', name='photo_id', data=photo.photos[0][-1].file_id, id_data=message.from_user.id)
            await message.answer('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                                 'üë©‚Äç‚ù§Ô∏è‚Äçüë® –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ, –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π: /love\n'
                                 'üìÇ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é: /start', reply_markup=main_user_kb())
        else:
            await message.answer('–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n'
                                 '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –ª–∏—Ü–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;')
        if faces_number == 1000:
            return
        os.remove(f'modules/functions/{file_name}')
    else:
        await message.answer('–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ.')
