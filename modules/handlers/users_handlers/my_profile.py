import os
import emoji

from aiogram import types
from main import dp
from modules.dispatcher import constant
from aiogram.dispatcher.filters import Text

from modules.dispatcher import bot, UserProfile
from modules.functions.check_photo import search_face
from modules.keyboards import user_sex_kb, user_profile_kb, close_it, get_geo, confirm, get_photo, zodiac_kb, \
    user_verifikation_kb
from modules.functions.work_with_geo import adres_from_adres, cords_to_address
from modules.sql_func import update_db, read_by_name, join_profile_all, update_city_db
from modules.handlers.handlers_func import edit_text_call
from modules.functions.simple_funcs import update_age_period


def settings_text(user_id: int):
    user_data = join_profile_all(id_data=user_id)[0]

    if str(user_data[7]) == "0":
        emoji = ''
    else:
        emoji = user_data[7]

    if str(user_data[5]) == "0":
        good = '‚úñÔ∏è –§–æ—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
    else:
        good = '‚úÖ –§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'

    if str(user_data[10]) == "0":
        premium = ''
    else:
        premium = 'üíé'

    if str(user_data[9]) == "0":
        insta = ''
    else:
        insta = f'üì∏<a href="https://instagram.com/{user_data[9]}">Instagram</a>\n'

    if str(user_data[8]) == "0":
        zodiac = ''
    else:
        zodiac = f'{user_data[8]}\n'

    if str(user_data[3]) == "0":
        city = ''
    else:
        city = f'üó∫{user_data[3]}\n'

    if str(user_data[6]) == "0":
        description = ''
    else:
        description = f'üìù{user_data[6]}\n'

    photo_id = user_data[4]

    name = user_data[1]
    age = user_data[2]
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    text = f'{emoji}{name}{premium}, {age}\n' \
           f'{good}\n' \
           f'{insta}{zodiac}{city}{description}'
    return text, photo_id


async def send_main_text(user_id: int):
    data = read_by_name(table='fast_info', name='search_status, photo_good', id_data=user_id)[0]
    status = int(data[0])
    photo = int(data[1])
    text, photo_id = settings_text(user_id)
    try:
        await bot.send_photo(caption=text, photo=photo_id, chat_id=user_id,
                             reply_markup=user_profile_kb(status, photo), parse_mode='html')
    except:
        await bot.send_message(text=text, chat_id=user_id,
                               reply_markup=user_profile_kb(status, photo), parse_mode='html')
    await UserProfile.start.set()


# Profile menu
@dp.message_handler(commands=['profile'], state='*')
@dp.message_handler(Text(equals='üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', ignore_case=True), state='*')
async def start_menu(message: types.Message):
    await send_main_text(message.from_user.id)


# Profile menu
@dp.callback_query_handler(state=UserProfile.verification, text='close_it')
@dp.callback_query_handler(state=UserProfile.zodiac, text='close_it')
@dp.callback_query_handler(state=UserProfile.about, text='close_it')
@dp.callback_query_handler(state=UserProfile.city, text='back')
@dp.callback_query_handler(state=UserProfile.name, text='close_it')
async def start_menu(call: types.CallbackQuery):
    # Send main profile text
    await send_main_text(call.from_user.id)


# Profile Name menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_name')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üë§ –ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à–µ –∏–º—è:</b>', k_board=close_it())
    await UserProfile.name.set()


# Profile NAME menu
@dp.message_handler(state=UserProfile.name)
async def start_menu(message: types.Message):
    status = True
    check_name = str(message.text.lower())
    with open('bad_words.txt', 'r') as words:
        words = str(words.read())
        words = words.split('\n')
        for word in words:
            if word in check_name:
                status = False
                break
            else:
                pass
    if not status:
        await message.answer('–í –≤–∞—à–µ–º –∏–º–µ–Ω–∏ –∏–º–µ—é—Ç—Å—è –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–µ —Å–ª–æ–≤–∞!')
        return
    update_db(name='user_name', data=message.text, id_data=message.from_user.id)
    await message.answer('–í–∞—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    # Send main profile text
    await send_main_text(message.from_user.id)


# Profile AGE menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_age')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üîû –ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b>', k_board=close_it())
    await UserProfile.age.set()


# Profile AGE menu
@dp.message_handler(state=UserProfile.age)
async def start_menu(message: types.Message):
    if message.text.isdigit():
        user_age = int(message.text)
        if user_age < 16:
            await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 16 –ª–µ—Ç')
        elif user_age > 119:
            await message.answer('–í –Ø–ø–æ–Ω–∏–∏ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –º–∏—Ä–∞ –ö–∞–Ω–µ –¢–∞–Ω–∞–∫–∞ –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–ª–∞ 119-–ª–µ—Ç–∏–µ.\n'
                                 '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –±—ã—Ç—å —Ç–∞–∫–∏–º —Å—Ç–∞—Ä—ã–º!')
        else:
            update_age_period(age=user_age, tg_ig=message.from_user.id)
            update_db(table='fast_info', name='user_age', data=user_age, id_data=message.from_user.id)
            await message.answer('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!')
    else:
        await message.answer('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º')
    # Send main profile text
    await send_main_text(message.from_user.id)


# Profile SEX menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_sex')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üöª –í—ã–±–µ—Ä–∏—Ç–µ <b>–í–∞—à –ø–æ–ª:</b>', k_board=user_sex_kb())
    await UserProfile.sex.set()


# Profile SEX menu
@dp.message_handler(state=UserProfile.sex)
async def start_menu(message: types.Message):
    if message.text.lower() == '–ø–∞—Ä–µ–Ω—å':
        update_db(table='fast_info', name='user_sex', data='men', id_data=message.from_user.id)
        update_db(table='fast_info', name='search_sex', data='female', id_data=message.from_user.id)
    elif message.text.lower() == '–¥–µ–≤—É—à–∫–∞':
        update_db(table='fast_info', name='user_sex', data='female', id_data=message.from_user.id)
        update_db(table='fast_info', name='search_sex', data='men', id_data=message.from_user.id)
    else:
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', reply_markup=user_sex_kb())
        return
    # Send main profile text
    await send_main_text(message.from_user.id)


# Profile CITY menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_city')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='–ù–∞–ø–∏—à–∏—Ç–µ <b>–í–∞—à –≥–æ—Ä–æ–¥:</b>\n'
                                         '–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
                         k_board=get_geo())
    await UserProfile.city.set()


# Profile CITY menu
@dp.message_handler(state=UserProfile.city)
async def start_menu(message: types.Message):
    try:
        city, latitude, longitude, full_adress = adres_from_adres(message.text)
        if city == 'Error' or city is None:
            await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
            return
        else:
            await message.answer(f'–Ø –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å:\n'
                                 f'<b>{full_adress}</b>\n'
                                 f'–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.', reply_markup=confirm(without_back=True),
                                 parse_mode='html')
            update_city_db(data=city, latitude=latitude, longitude=longitude, id_data=message.from_user.id)
    except:
        return
    await UserProfile.city.set()


# Profile CITY menu
@dp.message_handler(content_types=['location'], state=UserProfile.city)
async def fill_form(message: types.Message):
    x = message.location.latitude
    y = message.location.longitude
    address = cords_to_address(x=x, y=y)
    if address == 'Error':
        await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
        return
    address, latitude, longitude, full_adress = adres_from_adres(address)
    if address == 'Error':
        await message.answer('‚ùå –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ —Å –æ—à–∏–±–∫–∞–º–∏')
        return
    update_city_db(data=address, latitude=latitude, longitude=longitude, id_data=message.from_user.id)
    await message.answer('–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω!')
    # Send main profile text
    await send_main_text(message.from_user.id)


# Profile CITY menu
@dp.callback_query_handler(state=UserProfile.city, text='yes_all_good')
async def fill_form(call: types.CallbackQuery):
    await call.message.answer('–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω!')
    # Send main profile text
    await send_main_text(call.from_user.id)


# Profile PHOTO menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_photo')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ <b>–í–∞—à–µ —Ñ–æ—Ç–æ</b> –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram.\n\n'
                                         '–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏, '
                                         '—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏ –ª—É—á—à–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ä—É—á–Ω—É—é.',
                         k_board=get_photo(True))
    await UserProfile.photo.set()


# Profile PHOTO menu
@dp.message_handler(state=UserProfile.photo, content_types=types.ContentTypes.PHOTO)
async def fill_form(message: types.Message):
    try:
        file_name = f"{str(message.from_user.id)}.jpg"
        await message.photo[-1].download(destination_file=f'modules/functions/{file_name}')
        faces_number = search_face(file_name=file_name)
        if faces_number == 1:
            update_db(name='status', data='active', id_data=message.from_user.id)
            update_db(table='fast_info', name='photo_id', data=message.photo[-1].file_id, id_data=message.from_user.id)
            await message.answer('–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            # Send main profile text
            await send_main_text(message.from_user.id)
        else:
            await message.answer('–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n'
                                 '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –ª–∏—Ü–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;\n'
                                 '- –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥–æ—Ç—ã;\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;')
        os.remove(f'modules/functions/{file_name}')
    except:
        pass


# Profile PHOTO menu
@dp.message_handler(state=UserProfile.photo)
async def fill_form(message: types.Message):
    if message.text == '–í–∑—è—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è':
        file_name = f"{str(message.from_user.id)}.jpg"
        photo = await message.from_user.get_profile_photos()
        if str(photo.photos) == '[]':
            faces_number = 1000
        else:
            await photo.photos[0][-1].download(destination_file=f'modules/functions/{file_name}')
            faces_number = search_face(file_name=file_name)
        if faces_number == 1:
            update_db(name='status', data='active', id_data=message.from_user.id)
            update_db(table='fast_info', name='photo_id', data=photo.photos[0][-1].file_id,
                      id_data=message.from_user.id)
            await message.answer('–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            # Send main profile text
            await send_main_text(message.from_user.id)
        else:
            await message.answer('–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n'
                                 '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –ª–∏—Ü–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;\n'
                                 '- –Ω–∞ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞;')
        if faces_number == 1000:
            return
        os.remove(f'modules/functions/{file_name}')
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
        await send_main_text(message.from_user.id)
    else:
        await message.answer('–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ.')


# Profile ABOUT menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_about')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:\n'
                                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>0</b>', k_board=close_it())
    await UserProfile.about.set()


# Profile ABOUT menu
@dp.message_handler(state=UserProfile.about)
async def start_menu(message: types.Message):
    update_db(table='fast_info', name='about_text', data=message.text, id_data=message.from_user.id)
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
    # Send main profile text
    await send_main_text(message.from_user.id)


# Profile EMOJI menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_emoji')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º –∏–º–µ–Ω–µ–º!\n'
                                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>0</b>', k_board=close_it())
    await UserProfile.emoji.set()


# Profile EMOJI menu
@dp.message_handler(state=UserProfile.emoji)
async def start_menu(message: types.Message):
    if emoji.demojize(message.text).startswith(':') and emoji.demojize(message.text).endswith(':'):
        update_db(table='fast_info', name='emoji', data=message.text, id_data=message.from_user.id)
        await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
        # Send main profile text
        await send_main_text(message.from_user.id)
    elif message.text == '0':
        update_db(table='fast_info', name='emoji', data=message.text, id_data=message.from_user.id)
        await message.answer('–£–¥–∞–ª–µ–Ω–æ!')
        # Send main profile text
        await send_main_text(message.from_user.id)
    else:
        await message.answer('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ emoji!')


# Profile ZODIAC menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_zodiac')
async def start_menu(call: types.CallbackQuery):
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫:', reply_markup=zodiac_kb())
    await UserProfile.zodiac.set()


# Profile ZODIAC menu
@dp.callback_query_handler(state=UserProfile.zodiac)
async def start_menu(call: types.CallbackQuery):
    if call.data == 'zodiac_aries':
        zodiac = '‚ôàÔ∏è –û–≤–µ–Ω'
    elif call.data == 'zodiac_taurus':
        zodiac = '‚ôâÔ∏è –¢–µ–ª–µ—Ü'
    elif call.data == 'zodiac_gemini':
        zodiac = '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã'

    elif call.data == 'zodiac_cancer':
        zodiac = '‚ôãÔ∏è –†–∞–∫'
    elif call.data == 'zodiac_leo':
        zodiac = '‚ôåÔ∏è –õ–µ–≤'
    elif call.data == 'zodiac_virgo':
        zodiac = '‚ôçÔ∏è –î–µ–≤–∞'

    elif call.data == 'zodiac_libra':
        zodiac = '‚ôéÔ∏è –í–µ—Å—ã'
    elif call.data == 'zodiac_scorpio':
        zodiac = '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω'
    elif call.data == 'zodiac_sagittarius':
        zodiac = '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü'

    elif call.data == 'zodiac_capricorn':
        zodiac = '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥'
    elif call.data == 'zodiac_aquarius':
        zodiac = '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π'
    elif call.data == 'zodiac_pisces':
        zodiac = '‚ôìÔ∏è –†—ã–±—ã'

    elif call.data == 'clear':
        zodiac = '0'
    else:
        return
    update_db(table='fast_info', name='zodiac', data=zodiac, id_data=call.from_user.id)
    await call.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
    # Send main profile text
    await send_main_text(call.from_user.id)


# Profile INSTAGRAM menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_insta')
async def start_menu(call: types.CallbackQuery):
    await edit_text_call(call=call, text='–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Instagram\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>durov</b>\n'
                                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.\n'
                                         '–ü—Ä–∏–º–µ—Ä: <b>0</b>', k_board=close_it())
    await UserProfile.Instagram.set()


# Profile INSTAGRAM menu
@dp.message_handler(state=UserProfile.Instagram)
async def start_menu(message: types.Message):
    update_db(table='fast_info', name='instagram', data=message.text, id_data=message.from_user.id)
    if message.text == '0':
        await message.answer('–í–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º —É–¥–∞–ª–µ–Ω!')
    else:
        await message.answer('–í–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –¥–æ–±–∞–≤–ª–µ–Ω!')
    # Send main profile text
    await send_main_text(message.from_user.id)


# Profile Close/Open profile menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_close')
async def start_menu(call: types.CallbackQuery):
    status = read_by_name(table='fast_info', name='search_status', id_data=call.from_user.id)[0][0]
    if status == 0:
        update_db(table='fast_info', name='search_status', data=1, id_data=call.from_user.id)
        await edit_text_call(call=call, text='üôã–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ –ø–æ–∏—Å–∫–µ!')
    else:
        update_db(table='fast_info', name='search_status', data=0, id_data=call.from_user.id)
        await edit_text_call(call=call, text='üôÖ–í—ã —Å–∫—Ä—ã–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ –ø–æ–∏—Å–∫–µ!')
    # Send main profile text
    await send_main_text(call.from_user.id)


# Profile Close/Open profile menu
@dp.callback_query_handler(state=UserProfile.start, text='profile_good')
async def start_menu(call: types.CallbackQuery):
    photo_id = 'AgACAgIAAxkBAAIMP2JS1kOXbq8h1O1NoDg1L04NXPaVAAJvvjEb1JeRSiI8rJlH0iwVAQADAgADcwADIwQ'
    await bot.send_photo(chat_id=call.message.chat.id, photo=photo_id, parse_mode='html',
                         caption='–í–∞—à–µ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–ª–æ—á–∫—É, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '
                                 '–í–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –µ—ë –Ω–∏–∫—Ç–æ –Ω–µ '
                                 '—É–≤–∏–¥–∏—Ç, –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n'
                                 '<b>–í–∞–∂–Ω–æ, —É –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä—É–∫–∞ –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º –∂–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ '
                                 '—Å–º–æ–∂–µ—Ç –æ–¥–æ–±—Ä–∏—Ç—å –≤–∞–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!</b>', reply_markup=close_it())
    await UserProfile.verification.set()


# Start menu
@dp.message_handler(state=UserProfile.verification, content_types=types.ContentType.PHOTO)
async def start_menu(message: types.Message):
    await message.answer('–í–∞—à–µ —Ñ–æ—Ç–æ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é')
    await bot.send_photo(chat_id=constant.admin(), photo=message.photo[0].file_id,
                         caption=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {message.from_user.id}',
                         reply_markup=user_verifikation_kb(message.from_user.id))
    await UserProfile.start.set()
